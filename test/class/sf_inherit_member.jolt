// Copyright (c) 2014, Jeff Cohen
// All rights reserved.
// 
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
// 
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.

// Test inheritance of member (non-common) entities, basically methods and
// fields, that are not shared by a class and its metaclass. {

// Note: this test is very simplistic and incomplete, due to the currently
// primitive support for method inheritance.  In particular, there is no way
// to polymorphically execute a method at this time.  Also, multiple inheritance
// is unlikely to work correctly either, as there is no way to adjust the "this"
// reference if required.

func Main() -> int {
    const ct = RunTests()
    return ct + RunTests()
}

func RunTests() -> int {
    Test1()
    return 0
}

func Test1() {
    // Test simple inheritance of a method, simple redefinition of a method,
    // and multiple inheritance where all but one is deferred.

    var obj: C1d
    Print(  "Test1a: "); Print(obj.a(100))
    Print("\nTest1b: "); Print(obj.b(100))
    Print("\nTest1c: "); Print(obj.c(100))
    Print("\n")
}

class C1a {
    func a(x: int) -> int { x + 10 }
}

class C1b {
    virtual func b(x: int) -> int { x * 10 }
}

class C1c {
    // FIXME @deferred func b(x: int) -> int => deferred
    func c(x: int) -> int { x / 10 }
}

class C1d: C1a, C1b, C1c {
    override func a(x: int) -> int { x + 15 }
}
