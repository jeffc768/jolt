// Copyright (c) 2014, Jeff Cohen
// All rights reserved.
// 
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
// 
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.

// Test fat reference operations.

func Main() -> int {
    const ct = RunTests()
    return ct + RunTests()
}

func RunTests() -> int {
    Test1()
    Test2()
    Test3()
    Test4()
    Print("\n")
    return 0
}

func Test1() {
    Print(  "Test1a: ")
    var v1: C1
    v1.f1 = 536
    var r: C1& = v1
    Print(r.f1)

    Print("\nTest1b: ")
    var p: C1* = &r
    Print(p->f1)

    Print("\nTest1c: ")
    p->f1 = 364
    Print(v1.f1)
    Print(":")
    Print(r.f1)
    Print("\n")

    Print("\nTest1d: ")
    var s: C1& = *p
    v1.f1 = 231
    Print(v1.f1)
    Print(":")
    Print(r.f1)
    Print(":")
    Print(s.f1)

    Print("\nTest1e: ")
    var t: C1& = s
    Print(t.f1)
    v1.f1 = 723
    Print(":")
    Print(t.f1)
    Print("\n")
}

func Test2() {
    Print(  "Test2a: ")
    var v1: C1
    v1.f1 = 754
    var p: C1* = &v1
    var q: C1*& = p
    Print(xyz(q)->f1)

    Print("\nTest2b: ")
    xyz(q)->f1 = 238
    Print(v1.f1)

    Print("\nTest2c: ")
    var v2: C1
    v2.f1 = 873
    var p2: C1* = &v2
    var q2: C1*& = p2
    q = q2
    Print(q->f1)
    Print(":")
    Print(q2->f1)

    Print("\nTest2d: ")
    q->f1 = q->f1 + 1
    q2->f1 = q2->f1 - 5
    Print(v1.f1)
    Print(":")
    Print(v2.f1)

    Print("\n")
}

func xyz(p: C1*) -> C1* { p }

func Test3() {
    Print(  "Test3a: ")
    var ary: int[261]
    ary[62] = 824

    var r1: int[261]& = ary
    Print(r1[62])

    Print("\nTest3b: ")
    r1[200] = 56443
    var r2: int[]& = ary
    Print(#r2)
    Print(":")
    Print(r2[200])

    Print("\n")
}

class C1 {
    var f1: int
    var f1p: C1*

    virtual func Dump() { Print(f1) }
}

class C2 {
    var f2: int
}

// FIXME: cannot upcast a pointer to a non-primary base (i.e., C2)
class C3: C1, C2 {
    var f3: int
}

class C4: C3 {
    var f4: int

    this(x: int) {
        :+: f4 = x + 3
        f1 = x + 0
        f2 = x + 1
        f3 = x + 2
        Print("cons:")
    }

    ~this() {
        Print(":des")
    }

    override func Dump() {
        Print(f1)
        Print(":")
        Print(f2)
        Print(":")
        Print(f3)
        Print(":")
        Print(f4)
    }
}

func Test4() {
    Print(  "Test4a: ")
    var r: C1& = C4(369)
    r.Dump()

    Print("\nTest4b: ")
    var p: C1* = &r
    p->Dump()
}
