// Copyright (c) 2014, Jeff Cohen
// All rights reserved.
// 
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
// 
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.

// Test the type-of operator, $.

func Main() -> int {
    const ct = RunTests()
    return ct + RunTests()
}

func RunTests() -> int {
    Test1()
    Test2()
    Test3()
    return 0
}

func Test1() {
    // Take type of simple variable.

    var v1: C1
    var v2: $v1
    Print("Test1: ")
    v2.m()
    Print("\n")
}

func Test2() {
    // Take type of expression.
 
    var v1: C1
    var v2: $v1.n.f
    Print("Test2: ")
    v2.m()
    Print("\n")
}

func Test3() {
    // Prove that the operand of $ isn't being evaluated.

    Print("Test3: ")
    var v1: $p(0)
    v1.m()
    Print("\n")
}

class C1 {
    func m() { Print("xyzzy") }
    var n: C2
}

class C2 {
    var f: C3
}

class C3 {
    func m() { Print("abcde") }
}

func p(x: int) -> C1 {
    Print(x)
    C1()
}
