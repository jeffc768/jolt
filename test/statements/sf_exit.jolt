// Copyright (c) 2014, Jeff Cohen
// All rights reserved.
// 
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
// 
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.

// Note that the compound statements that can be exited already test for
// being exited from every part that can be exited in their own tests, and
// that won't be duplicated here.  The flavor here is on all the variations
// exit itself and with more complicated, nested compound statements.

func Main() -> int {
    const ct = RunTests()
    return ct + RunTests()
}

func RunTests() -> int {
    Test1()
    Test2()
    Test3()
    Test4()
    return 0
}

func Test1() {
    // Test various syntactic forms

    // Just plain exit
    var x: int
    if true {
        x = 7378
        exit
        x = 6363
    }
    Print(  "Test1a: "); Print(x)

    // Exit with a value
    Print("\nTest1b: "); Print({if true { exit 4783; 7578 } else { 6321 }})

    // Exit conditionally
    if true {
        x = 7377
        exit if false
        x = 6362
    }
    Print("\nTest1c: "); Print(x)
    if true {
        x = 7376
        exit if true
        x = 6361
    }
    Print("\nTest1d: "); Print(x)

    // Exit conditionally with value
    Print("\nTest1e: "); Print({if true {
                                    exit 4782 if false
                                    7577
                                } else {
                                    6320
                                }})
    Print("\nTest1f: "); Print({if true {
                                   exit 4782 if true
                                   7576
                               } else {
                                   6319
                               }})

    // Exit with label
/L1/
    if true {
        x = 7368
        exit /L1/
        x = 6353
    }
    Print("\nTest1g: "); Print(x)

    // Exit with a value
    Print("\nTest1h: "); Print({/L2/
                                   if true {
                                       exit /L2/ 4773
                                       7568
                                   } else {
                                       6311
                                   }})

    // Exit conditionally with label
/L3/
    if true {
        x = 7367
        exit /L3/ if false
        x = 6352
    }
    Print("\nTest1i: "); Print(x)
/L4/
    if true {
        x = 7366
        exit /L4/ if true
        x = 6351
    }
    Print("\nTest1j: "); Print(x)

    // Exit conditionally with value and label
    Print("\nTest1k: "); Print({/L5/ if true {
                                        exit /L5/ 4772 if false
                                        7567
                                    } else {
                                        6310
                                    }})
    Print("\nTest1l: "); Print({/L6/ if true {
                                        exit /L6/ 4772 if true
                                        7566
                                    } else {
                                        6309
                                    }})

    Print("\n")
}

func Test2() {
    // Test exiting from nested compound statements.

    Print(  "Test2a: "); Print(p2(1))
    Print("\nTest2b: "); Print(p2(2))
    Print("\nTest2c: "); Print(p2(3))
    Print("\nTest2d: "); Print(p2(4))
    Print("\n")
}

func p2(n: int) -> int {
    var x: int = 0
    var rv: int
    /L1/ while x < 6 {
        var y: int = 0
        x = x + 1
        rv = {
            /L2/ while y < 3 {
                y = y + 1
                /L3/ if n == 1 {
                    exit /L2/ 10000 + x * 100 + y
                }
            } else {
                /L3/ if n == 2 {
                    exit /L3/ 20000 + x * 100 + y
                } else if n == 3 {
                    exit /L1/ 30000 + x * 100 + y
                } else {
                    exit y
                }
            }
        }
    } else {
        rv
    }
}

func Test3() {
    // Be extra cruel and exit from within an exit statement.

    Print(  "Test3a: "); Print(p3(1))
    Print("\nTest3b: "); Print(p3(2))
    Print("\nTest3c: "); Print(p3(3))
    Print("\n")
}

func p3(n: int) -> int {
    var x: int = 0
    while x < 5 {
        x = x + 1
        exit {exit 100 + x if n == 1; 200 + x} if {exit 300 + x if n == 2; x == 3}
    } else {
        0
    }
}

func Test4() {
    // Test exiting from within labeled statement lists.
    Print("Test4a:")
    var x: int = 0
    while x < 6 {
        var z: int
        var v = 4 + /L1/ {
            if x == 0 {
                34
            } else if (x == 1) {
                exit 56
            } else {
                {
                    // This exit should ignore non-labeled block
                    exit 12 if x == 2

                    z = /L2/ (x == 3 ? { exit 62 }
                                     : { exit /L1/ 86 if x == 4; 87 })
                }
                z
            }
        }
        Print(' ')
        Print(v)
        x = x + 1
    }
    Print('\n')
}
