// Copyright (c) 2014, Jeff Cohen
// All rights reserved.
// 
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
// 
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.

func Main() -> int {
    const ct = RunTests()
    return ct + RunTests()
}

func RunTests() -> int {
    Test1()
    Test2()
    Test3()
    Test4()
    return 0
}

func Test1() {
    // Test various syntactic forms

    var i: int

    Print("Test1a: ")
    i = 0
    while i < 3 {
        Print(i)
        i = i + 1
    }
    Print("\n")

    Print("Test1b: ")
    i = 0
    while i < 3 { Print(i); i = i + 1 }
    Print("\n")

    Print("Test1c: ")
    while false {
        Print("fail")
    }
    Print(".\n")

    Print("Test1d: ")
    i = 0
    while i < 3 {
        Print(i)
        i = i + 1
    } else {
        Print("done")
    }
    Print("\n")

    Print("Test1e: ")
    while false { Print("fail") } else { Print("!") }
    Print("\n")
}

func Test2() {
    // Test value of while statement.

    Print("Test2a: "); Print(Test2_while1(5, 10)); Print("\n")
    Print("Test2b: "); Print(Test2_while1(9, 1)); Print("\n")
    Print("Test2c: "); Print(Test2_while1(9, 9)); Print("\n")

/* FIXME: doesn't work yet
    Print("Test2d: "); Print(Test2_while2(5, 10)); Print("\n")
    Print("Test2e: "); Print(Test2_while2(9, 1)); Print("\n")
    Print("Test2f: "); Print(Test2_while2(9, 9)); Print("\n")
*/
}

func Test2_while1(low: int, high: int) -> int {
    var count: int = 0
    var i: int = low
    while i <= high {
        i = i + 1
        count = count + 1
    } else {
        count
    }
}

/* FIXME: doesn't work yet.  This while loop doesn't correctly have a non-void
         type.
func Test2_while2(low: int, high: int) -> int {
    var count: int = 0
    var i: int = low
    while true {
        i = i + 1
        count = count + 1
        exit count if i <= high
    }
}
*/

func Test3() {
    // Test non-local exit from whiles.
    
    Print("Test3a: "); Print(Test3_while(5, 9, 0, 0, 0)); Print("\n")
    Print("Test3b: "); Print(Test3_while(5, 9, 7, 0, 0)); Print("\n")
    Print("Test3c: "); Print(Test3_while(5, 9, 0, 7, 0)); Print("\n")
    Print("Test3d: "); Print(Test3_while(5, 9, 0, 0, 10)); Print("\n")
}

func Test3_while(low: int, high: int,
                 ev1: int, ev2: int, ev3: int) -> int {
    var count: int = 0
    var i: int = low
    while ({exit count+1000 if i == ev1; i <= high}) {
        i = i + 1
        exit count+2000 if i == ev2
        count = count + 1
    } else {
        exit count+3000 if i == ev3
        count
    }
}

func Test4() {
    // Test next statement within while loops.

    Print("Test4a: ")
    var i: int = 0
    while i < 9 {
        i = i + 1
        next if i % 3 == 0
        Print(i)
    } else {
        Print("!")
    }
    Print("\n")

    Print("Test4b: ")
    i = 0
    while ({i = i + 1; next if i % 3 == 0; i < 9}) {
        Print(i)
    } else {
        Print("!")
    }
    Print("\n")
}
